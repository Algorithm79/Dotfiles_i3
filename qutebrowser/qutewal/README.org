#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
[[./scrots/qutewal.gif]]

* Summary
  :PROPERTIES:
  :CUSTOM_ID: pywal-qutebrowser-theme
  :END:
  
NOTE: This project has been permanently moved to [[https://gitlab.com/jjzmajic/qutewal][GitLab]]. You know why.

=qutewal= is a [[https://github.com/dylanaraps/pywal][pywal]]-based theme for [[https://qutebrowser.org][Qutebrowser]], the structure of which was
shamelessly /borrowed/ from [[https://github.com/Linuus/nord-qutebrowser/blob/master/nord-qutebrowser.py][nord-qutebrowser]].

* Installation
   :PROPERTIES:
   :CUSTOM_ID: install
   :END:

** Clone
1. If you do not wish to keep your own dotfiles under version control, clone
   this repository directly into your =~/.config/qutebrowser= directory.
2. Let the =.gitignore= file ignore everything save for the files related to
   this project.
2. Add =config.source('qutewal.py')= at the /end/ of you =config.py=
   file.
** Copy
1. Clone this repository wherever you find it most convenient
2. Copy =qutewal.py= into your =~/.config/qutebrowser= directory.
3. If you wish to dynamically reload your `Qutebrowser` colorscheme, also copy
   =qutewald.py= into the same directory and follow the steps under [[Dynamic
   Loading][Dynamic Loading]].
2. Add =config.source('qutewal.py')= at the /end/ of you =config.py=
   file.
** Symlink
1. Clone this repository wherever you find it most convenient
2. Symling (=ln -s=) =qutewal.py= into your =~/.config/qutebrowser= directory.
3. If you wish to dynamically reload your `Qutebrowser` colorscheme, also symlink
   =qutewald.py= into the same directory and follow the steps under [[Dynamic Loading][Dynamic Loading]].
2. Add =config.source('qutewal.py')= at the /end/ of you =config.py=
   file.

* Dynamic Loading
Dynamic loading depends on =inotify-simple=, =psutil=, and =python-prctl=. You
need to make sure they are on your =$PATH=. You can do this in one of 4 ways:
1. Install the packages using your distro's package manager
2. Run =pip install --user -r requirements.txt= inside the repo folder and add
   =~/.local/bin= to your =$PATH= in your shell of choice:
   + [[https://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path][bash]]
   + [[https://stackoverflow.com/questions/11530090/adding-a-new-entry-to-the-path-variable-in-zsh][zsh]]
     (second answer)
   + [[https://stackoverflow.com/questions/7064053/add-a-relative-path-to-path-on-fish-startup][fish]]
3. Run =pipenv install= inside the repo folder and add the generated virtual
   environments to your =$PATH= as shown above.
4. NOTE: *NOT RECOMMENDED*. Run =sudo pip install -r requirements.txt= inside
   the repo folder.

Finally, either set the variable =qutewal_dynamic_loading= to =True= inside
=qutewal.py=, or export the environment variable =QUTEWAL_DYNAMIC_LOADING= as
=True= using your shell of choice *at login*:
   + bash/zsh :: =export QUTEWAL_DYNAMIC_LOADING=True=
   + fish :: =set -Ux QUTEWAL_DYNAMIC_LOADING True=

Also note that this will only work on Linux, because other *nix kernels do not
support killing orphaned children on parent death without the processes talking
to eachother. For the curious, this is the code snippet that tells the kernel to
do that:
#+BEGIN_SRC python
qutewald = subprocess.popen(
    [daemon_absolute, colors_absolute],
    preexec_fn=lambda: prctl.set_pdeathsig(signal.sigterm))
#+END_SRC

* TODOs
+ Extend =pywal= palette with extra shades, like [[https://gitlab.com/jjzmajic/ewal][ewal]].
